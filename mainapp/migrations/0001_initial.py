# Generated by Django 3.2.5 on 2023-04-05 06:41

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import mainapp.enumClass


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Type',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('desc', models.TextField(blank=True)),
                ('thumbnail_path', models.CharField(max_length=255)),
                ('sample_video_path', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField()),
                ('question', models.CharField(max_length=1024)),
                ('sample_answer', models.CharField(blank=True, max_length=1024)),
                ('desc', models.TextField(blank=True)),
                ('type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='mainapp.type')),
            ],
        ),
        migrations.CreateModel(
            name='Prompt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prompt', models.CharField(max_length=1024)),
                ('desc', models.TextField(blank=True)),
                ('type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='mainapp.type')),
            ],
        ),
        migrations.CreateModel(
            name='Media',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('media_type', models.CharField(max_length=10)),
                ('file_path', models.CharField(max_length=255)),
                ('topic', models.CharField(max_length=255)),
                ('desc', models.TextField(blank=True)),
                ('type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='mainapp.type')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('status', models.CharField(choices=[(mainapp.enumClass.StatusChoice['PENDING'], 'Pending'), (mainapp.enumClass.StatusChoice['ALLOWED'], 'Allowed'), (mainapp.enumClass.StatusChoice['DISALLOWED'], 'Disallowed'), (mainapp.enumClass.StatusChoice['DELETED'], 'Deleted')], max_length=30)),
                ('role', models.CharField(choices=[(mainapp.enumClass.RoleChoice['SUPERADMIN'], 'Superadmin'), (mainapp.enumClass.RoleChoice['ADMIN'], 'Admin'), (mainapp.enumClass.RoleChoice['ASSISTANT'], 'Assistant'), (mainapp.enumClass.RoleChoice['SUPPORT'], 'Support'), (mainapp.enumClass.RoleChoice['RETURN_CUSTOMER'], 'Returning Customer'), (mainapp.enumClass.RoleChoice['CUSTOMER'], 'Customer'), (mainapp.enumClass.RoleChoice['REGISTER_USER'], 'Registered User'), (mainapp.enumClass.RoleChoice['USER'], 'User'), (mainapp.enumClass.RoleChoice['AFFILIATE'], 'Affiliate')], max_length=30)),
                ('is_online', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
    ]
